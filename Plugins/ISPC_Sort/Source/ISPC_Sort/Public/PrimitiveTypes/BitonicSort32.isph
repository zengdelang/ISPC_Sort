#ifndef __BITONICSORT32_ISPH__
#define __BITONICSORT32_ISPH__

#define Copy_Temp_Vector32(Temp, V) \
{ \
    foreach (i = 0 ... 32) \
    { \
        (Temp)[i] = (V)[i]; \
    } \
}

#if TARGET_WIDTH == 32

#define Shuffle32_One_Vector(Sort32Type, V, Mask) \
{\
    foreach (i = 0 ... 32) \
    { \
        (V)[i] = shuffle((V)[i], Mask[i]); \
    } \
}

#else

#define Shuffle32_One_Vector(Sort32Type, V, Mask) \
{\
    uniform Sort32Type _STemp[32]; \
    Copy_Temp_Vector32(_STemp, V); \
    foreach (i = 0 ... 32) \
    { \
        _Pragma("ignore warning(perf)") \
        (V)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#if TARGET_WIDTH == 32

#define Shuffle32_One_Vector_To_Vector(Sort32Type, V, SaveV, Mask) \
{ \
    foreach (i = 0 ... 32) \
    { \
        (SaveV)[i] = shuffle((V)[i], Mask[i]); \
    } \
}

#else

#define Shuffle32_One_Vector_To_Vector(Sort32Type, V, SaveV, Mask) \
{ \
    uniform Sort32Type _STemp[32]; \
    Copy_Temp_Vector32(_STemp, V); \
    foreach (i = 0 ... 32) \
    { \
        _Pragma("ignore warning(perf)") \
        (SaveV)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#if TARGET_WIDTH == 32 

#define Shuffle32_Two_Vectors(Sort32Type, V1, V2, SaveV, Mask) \
{ \
    foreach (i = 0 ... 32) \
    { \
        (SaveV)[i] = shuffle((V1)[i], (V2)[i], Mask[i]); \
    } \
}

#else

#define Shuffle32_Two_Vectors(Sort32Type, V1, V2, SaveV, Mask) \
{ \
    uniform Sort32Type _STemp[32 + 32]; \
    foreach (i = 0 ... 32) \
    { \
        _STemp[i] = (V1)[i]; \
        _STemp[i + 32] = (V2)[i]; \
    } \
\
    foreach (i = 0 ... 32) \
    { \
        _Pragma("ignore warning(perf)") \
        (SaveV)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#ifndef COEX

#define COEX(V1, V2, COEX_OP, Sort32Type, ...) \
{ \
    COEX_OP(V1, V2, Sort32Type, __VA_ARGS__); \
}

#endif

#define COEX_32_ASC(V1, V2, Sort32Type, ...) \
{ \
    foreach (i = 0 ... 32) \
    { \
        Sort32Type TempV = (V1)[i]; \
\
        (V1)[i] = min(TempV, (V2)[i]); \
        (V2)[i] = max(TempV, (V2)[i]); \
    } \
}

#define COEX_32_DESC(V1, V2, Sort32Type, ...) \
{ \
    foreach (i = 0 ... 32) \
    { \
        Sort32Type TempV = (V1)[i]; \
\
        (V1)[i] = max(TempV, (V2)[i]); \
        (V2)[i] = min(TempV, (V2)[i]); \
    } \
}

#ifndef COEX_SHUFFLE

#define COEX_SHUFFLE(V, Mask1, Mask2, COEX_SHUFFLE_OP, Sort32Type, ...) \
{ \
    COEX_SHUFFLE_OP(V, Mask1, Mask2, Sort32Type, __VA_ARGS__); \
}

#endif

#define COEX_SHUFFLE_32_ASC(V, Mask1, Mask2, Sort32Type, ...) \
{ \
    uniform Sort32Type TempV[32]; \
    Shuffle32_One_Vector_To_Vector(Sort32Type, (V), TempV, Mask1); \
\
    uniform Sort32Type Min[32]; \
    uniform Sort32Type Max[32]; \
    foreach (i = 0 ... 32) \
    { \
        Min[i] = min(TempV[i], (V)[i]); \
        Max[i] = max(TempV[i], (V)[i]); \
    } \
\
    Shuffle32_Two_Vectors(Sort32Type, Min, Max, (V), Mask2); \
}

#define COEX_SHUFFLE_32_DESC(V, Mask1, Mask2, Sort32Type, ...) \
{ \
    uniform Sort32Type TempV[32]; \
    Shuffle32_One_Vector_To_Vector(Sort32Type, (V), TempV, Mask1); \
\
    uniform Sort32Type Min[32]; \
    uniform Sort32Type Max[32]; \
    foreach (i = 0 ... 32) \
    { \
        Min[i] = max(TempV[i], (V)[i]); \
        Max[i] = min(TempV[i], (V)[i]); \
    } \
\
    Shuffle32_Two_Vectors(Sort32Type, Min, Max, (V), Mask2); \
}

#define Bitonic_Sort_64(Sort32Type, Data, COEX_OP, ...) \
{ \
    uniform Sort32Type V1[32]; \
    uniform Sort32Type V2[32]; \
    uniform Sort32Type Temp[32]; \
\
    { \
        foreach (i = 0 ... 32) \
        { \
            V1[i] = Data[i]; \
            V2[i] = Data[i + 32]; \
        } \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask[32] = {1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30}; \
        Shuffle32_One_Vector(Sort32Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 2, 32, 34, 4, 6, 36, 38, 8, 10, 40, 42, 12, 14, 44, 46, 16, 18, 48, 50, 20, 22, 52, 54, 24, 26, 56, 58, 28, 30, 60, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 3, 33, 35, 5, 7, 37, 39, 9, 11, 41, 43, 13, 15, 45, 47, 17, 19, 49, 51, 21, 23, 53, 55, 25, 27, 57, 59, 29, 31, 61, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask3[32] = {3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16, 23, 22, 21, 20, 27, 26, 25, 24, 31, 30, 29, 28}; \
        Shuffle32_One_Vector(Sort32Type, V2, Mask3); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 1, 32, 33, 4, 5, 36, 37, 8, 9, 40, 41, 12, 13, 44, 45, 16, 17, 48, 49, 20, 21, 52, 53, 24, 25, 56, 57, 28, 29, 60, 61}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {2, 3, 34, 35, 6, 7, 38, 39, 10, 11, 42, 43, 14, 15, 46, 47, 18, 19, 50, 51, 22, 23, 54, 55, 26, 27, 58, 59, 30, 31, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 2, 33, 35, 4, 6, 37, 39, 8, 10, 41, 43, 12, 14, 45, 47, 16, 18, 49, 51, 20, 22, 53, 55, 24, 26, 57, 59, 28, 30, 61, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 3, 32, 34, 5, 7, 36, 38, 9, 11, 40, 42, 13, 15, 44, 46, 17, 19, 48, 50, 21, 23, 52, 54, 25, 27, 56, 58, 29, 31, 60, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask3[32] = {7, 6, 5, 4, 3, 2, 1, 0,   15, 14, 13, 12, 11, 10, 9, 8, 23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24}; \
        Shuffle32_One_Vector(Sort32Type, V2, Mask3); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 2, 4, 6, 32, 34, 36, 38, 8, 10, 12, 14, 40, 42, 44, 46, 16, 18, 20, 22, 48, 50, 52, 54, 24, 26, 28, 30, 56, 58, 60, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 3, 5, 7, 33, 35, 37, 39, 9, 11, 13, 15, 41, 43, 45, 47, 17, 19, 21, 23, 49, 51, 53, 55, 25, 27, 29, 31, 57, 59, 61, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 2, 32, 34, 4, 6, 36, 38, 8, 10, 40, 42, 12, 14, 44, 46, 16, 18, 48, 50, 20, 22, 52, 54, 24, 26, 56, 58, 28, 30, 60, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 3, 33, 35, 5, 7, 37, 39, 9, 11, 41, 43, 13, 15, 45, 47, 17, 19, 49, 51, 21, 23, 53, 55, 25, 27, 57, 59, 29, 31, 61, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 32, 2, 34, 4, 36, 6, 38, 8, 40, 10, 42, 12, 44, 14, 46, 16, 48, 18, 50, 20, 52, 22, 54, 24, 56, 26, 58, 28, 60, 30, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 33, 3, 35, 5, 37, 7, 39, 9, 41, 11, 43, 13, 45, 15, 47, 17, 49, 19, 51, 21, 53, 23, 55, 25, 57, 27, 59, 29, 61, 31, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask[32] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16}; \
        Shuffle32_One_Vector(Sort32Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] =  {0, 1, 2, 3, 8, 9, 10, 11, 32, 33, 34, 35, 40, 41, 42, 43, 16, 17, 18, 19, 24, 25, 26, 27, 48, 49, 50, 51, 56, 57, 58, 59}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {4, 5, 6, 7, 12, 13, 14, 15, 36, 37, 38, 39, 44, 45, 46, 47, 20, 21, 22, 23, 28, 29, 30, 31, 52, 53, 54, 55, 60, 61, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 1, 4, 5, 32, 33, 36, 37, 8, 9, 12, 13, 40, 41, 44, 45, 16, 17, 20, 21, 48, 49, 52, 53, 24, 25, 28, 29, 56, 57, 60, 61}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {2, 3, 6, 7, 34, 35, 38, 39,  10, 11, 14, 15,  42, 43, 46, 47,  18, 19, 22, 23, 50, 51, 54, 55, 26, 27, 30, 31, 58, 59, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 2, 32, 34, 4, 6, 36, 38, 8, 10, 40, 42, 12, 14, 44, 46, 16, 18, 48, 50, 20, 22, 52, 54, 24, 26, 56, 58, 28, 30, 60, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 3, 33, 35, 5, 7, 37, 39, 9, 11, 41, 43, 13, 15, 45, 47, 17, 19, 49, 51, 21, 23, 53, 55, 25, 27, 57, 59, 29, 31, 61, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 32, 2, 34, 4, 36, 6, 38, 8, 40, 10, 42, 12, 44, 14, 46, 16, 48, 18, 50, 20, 52, 22, 54, 24, 56, 26, 58, 28, 60, 30, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 33, 3, 35, 5, 37, 7, 39, 9, 41, 11, 43, 13, 45, 15, 47, 17, 49, 19, 51, 21, 53, 23, 55, 25, 57, 27, 59, 29, 61, 31, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask[32] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
        Shuffle32_One_Vector(Sort32Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 31, 1, 30, 2, 29, 3, 28, 4, 27, 5, 26, 6, 25, 7, 24,      32, 63, 33, 62, 34, 61, 35, 60, 36, 59, 37, 58, 38, 57, 39, 56}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {8, 23, 9, 22, 10, 21, 11, 20, 12, 19, 13, 18, 14, 17, 15, 16,   40, 55, 41, 54, 42, 53, 43, 52, 44, 51, 45, 50, 46, 49, 47, 48}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 1, 2, 3, 4, 5, 6, 7, 32, 33, 34, 35, 36, 37, 38, 39, 16, 17, 18, 19, 20, 21, 22, 23, 48, 49, 50, 51, 52, 53, 54, 55}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {8, 9, 10, 11, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 46, 47, 24, 25, 26, 27, 28, 29, 30, 31, 56, 57, 58, 59, 60, 61, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 1, 2, 3, 32, 33, 34, 35, 8, 9, 10, 11, 40, 41, 42, 43, 16, 17, 18, 19, 48, 49, 50, 51, 24, 25, 26, 27, 56, 57, 58, 59}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {4, 5, 6, 7, 36, 37, 38, 39, 12, 13, 14, 15, 44, 45, 46, 47, 20, 21, 22, 23, 52, 53, 54, 55, 28, 29, 30, 31, 60, 61, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 1, 32, 33, 4, 5, 36, 37, 8, 9, 40, 41, 12, 13, 44, 45, 16, 17, 48, 49, 20, 21, 52, 53, 24, 25, 56, 57, 28, 29, 60, 61}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {2, 3, 34, 35, 6, 7, 38, 39, 10, 11, 42, 43, 14, 15, 46, 47, 18, 19, 50, 51, 22, 23, 54, 55, 26, 27, 58, 59, 30, 31, 62, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        Copy_Temp_Vector32(Temp, V1); \
\
        const uniform int Mask1[32] = {0, 16, 32, 48, 2, 18, 34, 50, 4, 20, 36, 52, 6, 22, 38, 54, 8, 24, 40, 56, 10, 26, 42, 58, 12, 28, 44, 60, 14, 30, 46, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V1, Mask1); \
\
        const uniform int Mask2[32] = {1, 17, 33, 49, 3, 19, 35, 51, 5, 21, 37, 53, 7, 23, 39, 55, 9, 25, 41, 57, 11, 27, 43, 59, 13, 29, 45, 61, 15, 31, 47, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort32Type, __VA_ARGS__); \
    } \
\
    { \
        const uniform int Mask1[32] = {0, 32, 2, 34, 4, 36, 6, 38, 8, 40, 10, 42, 12, 44, 14, 46, 16, 48, 18, 50, 20, 52, 22, 54, 24, 56, 26, 58, 28, 60, 30, 62}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, Data, Mask1); \
\
        const uniform int Mask2[32] = {1, 33, 3, 35, 5, 37, 7, 39, 9, 41, 11, 43, 13, 45, 15, 47, 17, 49, 19, 51, 21, 53, 23, 55, 25, 57, 27, 59, 29, 61, 31, 63}; \
        Shuffle32_Two_Vectors(Sort32Type, V1, V2, Data + 32, Mask2); \
    } \
}

#ifdef GetVectorIndex32
#undef GetVectorIndex32
#endif

#define GetVectorIndex32(Index) (Index) * 32

#define Merge_32_Columns_With_16_Elements(Sort32Type, Data, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    const uniform int Mask[32] = {1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, \
                                  17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30}; \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(8), Mask); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(4), Mask); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(2), Mask); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(1), Mask); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask1[32] = {0,     1 + 32,   2,    3 + 32,   4,  5 + 32,    6,  7 + 32,    8,  9 + 32,   10, 11 + 32,   12, 13 + 32,   14, 15 + 32, \
                                   16,   17 + 32,  18,   19 + 32,  20, 21 + 32,   22, 23 + 32,   24, 25 + 32,   26, 27 + 32,   28, 29 + 32,   30, 31 + 32}; \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask2[32] = {3, 2, 1, 0,      7, 6, 5, 4,         11, 10, 9, 8,    15, 14, 13, 12, \
                                   19, 18, 17, 16,  23, 22, 21, 20,     27, 26, 25, 24,  31, 30, 29, 28}; \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(8), Mask2); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask2); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask2); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask2); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask2); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask2); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask2); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask2); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(4), Mask2); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask2); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask2); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask2); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask2); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask2); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask2); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask2); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(2), Mask2); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask2); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask2); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask2); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask2); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask2); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask2); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask2); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(1), Mask2); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask2); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask2); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask2); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask2); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask2); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask2); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask2); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask3[32] = {0, 1, 2 + 32, 3 + 32, 4, 5, 6 + 32, 7 + 32, 8, 9, 10 + 32, 11 + 32, 12, 13, 14 + 32, 15 + 32, \
                                   16, 17, 18 + 32, 19 + 32, 20, 21, 22 + 32, 23 + 32, 24, 25, 26 + 32, 27 + 32, 28, 29, 30 + 32, 31 + 32}; \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask2, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask4[32] = {7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, \
                                   23, 22, 21, 20, 19, 18, 17, 16,  31, 30, 29, 28, 27, 26, 25, 24}; \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(8), Mask4); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask4); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask4); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask4); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask4); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask4); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask4); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask4); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(4), Mask4); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask4); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask4); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask4); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask4); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask4); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask4); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask4); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(2), Mask4); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask4); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask4); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask4); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask4); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask4); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask4); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask4); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(1), Mask4); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask4); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask4); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask4); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask4); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask4); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask4); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask4); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask5[32] = {0, 1, 2, 3, 4 + 32, 5 + 32, 6 + 32, 7 + 32, 8, 9, 10, 11, 12 + 32, 13 + 32, 14 + 32, 15 + 32, \
                                   16, 17, 18, 19, 20 + 32, 21 + 32, 22 + 32, 23 + 32, 24, 25, 26, 27, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
    const uniform int Mask2_[32] = {2, 3, 0, 1,       6, 7, 4, 5,       10, 11, 8, 9,    14, 15, 12, 13, \
                                    18, 19, 16, 17,   22, 23, 20, 21,   26, 27, 24, 25,  30, 31, 28, 29}; \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask6[32] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, \
                                   31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16}; \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(8), Mask6); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask6); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask6); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask6); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask6); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask6); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask6); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask6); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(4), Mask6); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask6); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask6); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask6); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask6); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask6); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask6); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask6); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(2), Mask6); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask6); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask6); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask6); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask6); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask6); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask6); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask6); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(1), Mask6); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask6); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask6); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask6); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask6); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask6); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask6); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask6); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask7[32] = {0, 1, 2, 3, 4, 5, 6, 7,           8 + 32, 9 + 32, 10 + 32, 11 + 32, 12 + 32, 13 + 32, 14 + 32, 15 +32, \
                                   16, 17, 18, 19, 20, 21, 22, 23,   24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
    const uniform int Mask4_[32] = {4, 5, 6, 7,       0, 1, 2, 3,       12, 13, 14, 15,    8, 9, 10, 11, \
                                    20, 21, 22, 23,   16, 17, 18, 19,   28, 29, 30, 31,    24, 25, 26, 27}; \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask8[32] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, \
                                   15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(8), Mask8); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask8); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask8); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask8); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask8); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask8); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask8); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask8); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(4), Mask8); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask8); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask8); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask8); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(12), Mask8); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask8); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask8); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask8); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(2), Mask8); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask8); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(6), Mask8); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask8); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(10), Mask8); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask8); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(14), Mask8); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask8); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(1), Mask8); COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(3), Mask8); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(5), Mask8); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(7), Mask8); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(9), Mask8); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(11), Mask8); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(13), Mask8); COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(15), Mask8); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    const uniform int Mask9[32] = {0, 1, 2, 3, 4, 5, 6, 7,  8, 9, 10, 11, 12, 13, 14, 15, \
                                   16 + 32, 17 + 32, 18 + 32, 19 + 32, 20 + 32, 21 + 32, 22 + 32, 23 + 32,  24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
    const uniform int Mask6_[32] = {8, 9, 10, 11, 12, 13, 14, 15,        0, 1, 2, 3, 4, 5, 6, 7, \
                                    24, 25, 26, 27, 28, 29, 30, 31,       16, 17, 18, 19, 20, 21, 22, 23}; \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask8, Mask9, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex32(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
}

// The size of Data must be 512
// Green’s irregular sorting network
#define Sort_16_Column_Wise_32(Sort32Type, Data, COEX_OP, ...) \
{ \
    COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(1), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(14), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(3), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(12), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(0), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(15), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(11), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(13), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(4), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(2), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(1), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(14), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(2), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(13), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(5), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(10), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(3), Data + GetVectorIndex32(4), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(5), Data + GetVectorIndex32(6), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(7), Data + GetVectorIndex32(8), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(9), Data + GetVectorIndex32(10), COEX_OP, Sort32Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex32(11), Data + GetVectorIndex32(12), COEX_OP, Sort32Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex32(6), Data + GetVectorIndex32(7), COEX_OP, Sort32Type, __VA_ARGS__); COEX(Data + GetVectorIndex32(8), Data + GetVectorIndex32(9), COEX_OP, Sort32Type, __VA_ARGS__); \
}

#define Bitonic_Merge32_64(Sort32Type, Data, N, S, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    for (uniform int T = S * 2; T < 2 * N; T *= 2) \
	{ \
		for (uniform int L = 0; L < N; L += T) \
		{ \
			for (uniform int J = max(L + T - N, 0); J < T / 2; J += 2) \
			{ \
                const uniform int Mask[32] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, \
                                              15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
                Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(L + T - 1 - J), Mask); \
                Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(L + T - 2 - J), Mask); \
\
				COEX(Data + GetVectorIndex32(L + J), Data + GetVectorIndex32(L + T - 1 - J), COEX_OP, Sort32Type, __VA_ARGS__); \
				COEX(Data + GetVectorIndex32(L + J + 1), Data + GetVectorIndex32(L + T - 2 - J), COEX_OP, Sort32Type, __VA_ARGS__); \
			} \
		} \
\
		for (uniform int M = T / 2; M > 4; M /= 2) \
		{ \
			for (uniform int k = 0; k < N - M / 2; k += M) \
			{ \
				const uniform int Bound = min((k + M / 2), N - (M / 2)); \
				for (uniform int J = k; J < Bound; J += 2) \
				{ \
					COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(M / 2 + J), COEX_OP, Sort32Type, __VA_ARGS__); \
					COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(M / 2 + J + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
				} \
			} \
		} \
\
		for (uniform int J = 0; J < N - 2; J += 4) \
		{ \
			COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(J + 2), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(J + 3), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N; J += 2) \
		{ \
			COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(J + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int I = 0; I < N; I += 2) \
		{ \
            const uniform int Mask6[32] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,    \
                                          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; \
            const uniform int Mask7[32] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,   \
                                           16 + 32, 17 + 32, 18 + 32, 19 + 32,  20 + 32, 21 + 32, 22 + 32, 23 + 32, 24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            const uniform int Mask[32] = {8, 9, 10, 11, 12, 13, 14, 15,   0, 1, 2, 3, 4, 5, 6, 7, \
                                         24, 25, 26, 27, 28, 29, 30, 31,  16, 17, 18, 19, 20, 21, 22, 23}; \
            const uniform int Mask1[32] = {0, 1, 2, 3, 4, 5, 6, 7,           8 + 32, 9 + 32, 10 + 32, 11 + 32,   12 + 32, 13 + 32, 14 + 32, 15 + 32, \
                                           16, 17, 18, 19, 20, 21, 22, 23,   24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            const uniform int Mask4[32] = {4, 5, 6, 7, 0, 1, 2, 3,          12, 13, 14, 15, 8, 9, 10, 11, \
                                           20, 21, 22, 23, 16, 17, 18, 19,  28, 29, 30, 31, 24, 25, 26, 27}; \
            const uniform int Mask5[32] = {0, 1, 2, 3,     4 + 32, 5 + 32, 6 + 32, 7 + 32,  8, 9, 10, 11,   12 + 32, 13 + 32, 14 + 32, 15 + 32, \
                                           16, 17, 18, 19, 20 + 32, 21 + 32, 22 + 32, 23 + 32,   24, 25, 26, 27, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            uniform Sort32Type Temp[32]; \
            const uniform int Mask2[32] = {0, 0 + 32, 1, 1 + 32,         4, 4 + 32, 5, 5 + 32,     8,  8 + 32,  9, 9 + 32,     12, 12 + 32, 13, 13 + 32,  \
                                           16, 16 + 32, 17, 17 + 32,    20, 20 + 32, 21, 21 + 32,  24, 24 + 32, 25, 25 + 32,   28, 28 + 32, 29, 29 + 32}; \
            const uniform int Mask3[32] = {2, 2 + 32, 3, 3 + 32,      6, 6 + 32, 7, 7 + 32, 10, 10 + 32, 11, 11 + 32, 14, 14 + 32, 15, 15 + 32, \
                                           18, 18 + 32, 19, 19 + 32,  22, 22 + 32, 23, 23 + 32,    26, 26 + 32, 27, 27 + 32,   30, 30 + 32, 31, 31 + 32}; \
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type,Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
            COEX(Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
\
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type, Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
            COEX(Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
\
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type, Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
		} \
	} \
}

#define Bitonic_Merge32_512(Sort32Type, Data, N, S, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
	uniform int Remainder16 = N - N % 16; \
	uniform int Remainder8 = N - N % 8; \
 \
	for (uniform int T = S * 2; T < 2 * N; T *= 2) \
	{ \
		for (uniform int L = 0; L < N; L += T) \
		{ \
			for (uniform int J = max(L + T - N, 0); J < T / 2; J += 2) \
			{ \
                const uniform int Mask[32] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, \
                                              15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
                Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(L + T - 1 - J), Mask); \
                Shuffle32_One_Vector(Sort32Type, Data + GetVectorIndex32(L + T - 2 - J), Mask); \
\
				COEX(Data + GetVectorIndex32(L + J), Data + GetVectorIndex32(L + T - 1 - J), COEX_OP, Sort32Type, __VA_ARGS__); \
				COEX(Data + GetVectorIndex32(L + J + 1), Data + GetVectorIndex32(L + T - 2 - J), COEX_OP, Sort32Type, __VA_ARGS__); \
			} \
		} \
 \
		for (uniform int M = T / 2; M > 16; M /= 2) \
		{ \
			for (uniform int K = 0; K < N - M / 2; K += M) \
			{ \
				uniform int Bound = min((K + M / 2), N - (M / 2)); \
				for (uniform int J = K; J < Bound; J += 2) \
				{ \
					COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(M / 2 + J), COEX_OP, Sort32Type, __VA_ARGS__); \
					COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(M / 2 + J + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
				} \
			} \
		} \
\
		for (uniform int J = 0; J < Remainder16; J += 16) \
		{ \
			COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(J + 8), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(J + 9), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 2), Data + GetVectorIndex32(J + 10), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 3), Data + GetVectorIndex32(J + 11), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 4), Data + GetVectorIndex32(J + 12), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 5), Data + GetVectorIndex32(J + 13), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 6), Data + GetVectorIndex32(J + 14), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 7), Data + GetVectorIndex32(J + 15), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = Remainder16 + 8; J < N; J += 1) \
		{ \
			COEX(Data + GetVectorIndex32(J - 8), Data + GetVectorIndex32(J), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < Remainder8; J += 8) \
		{ \
			COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(J + 4), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(J + 5), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 2), Data + GetVectorIndex32(J + 6), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 3), Data + GetVectorIndex32(J + 7), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = Remainder8 + 4; J < N; J += 1) \
		{ \
			COEX(Data + GetVectorIndex32(J - 4), Data + GetVectorIndex32(J), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N - 2; J += 4) \
		{ \
			COEX(Data + GetVectorIndex32(J), Data + GetVectorIndex32(J + 2), COEX_OP, Sort32Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex32(J + 1), Data + GetVectorIndex32(J + 3), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N; J += 2) \
		{ \
			COEX(Data+ GetVectorIndex32(J), Data + GetVectorIndex32(J + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
		} \
\
        for (uniform int I = 0; I < N; I += 2) \
        { \
            const uniform int Mask6[32] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,    \
                                          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; \
            const uniform int Mask7[32] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,   \
                                           16 + 32, 17 + 32, 18 + 32, 19 + 32,  20 + 32, 21 + 32, 22 + 32, 23 + 32, 24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            const uniform int Mask[32] = {8, 9, 10, 11, 12, 13, 14, 15,   0, 1, 2, 3, 4, 5, 6, 7, \
                                         24, 25, 26, 27, 28, 29, 30, 31,  16, 17, 18, 19, 20, 21, 22, 23}; \
            const uniform int Mask1[32] = {0, 1, 2, 3, 4, 5, 6, 7,           8 + 32, 9 + 32, 10 + 32, 11 + 32,   12 + 32, 13 + 32, 14 + 32, 15 + 32, \
                                           16, 17, 18, 19, 20, 21, 22, 23,   24 + 32, 25 + 32, 26 + 32, 27 + 32, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask, Mask1, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            const uniform int Mask4[32] = {4, 5, 6, 7, 0, 1, 2, 3,          12, 13, 14, 15, 8, 9, 10, 11, \
                                           20, 21, 22, 23, 16, 17, 18, 19,  28, 29, 30, 31, 24, 25, 26, 27}; \
            const uniform int Mask5[32] = {0, 1, 2, 3,     4 + 32, 5 + 32, 6 + 32, 7 + 32,  8, 9, 10, 11,   12 + 32, 13 + 32, 14 + 32, 15 + 32, \
                                           16, 17, 18, 19, 20 + 32, 21 + 32, 22 + 32, 23 + 32,   24, 25, 26, 27, 28 + 32, 29 + 32, 30 + 32, 31 + 32}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex32(I), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex32(I + 1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort32Type, __VA_ARGS__); \
\
            uniform Sort32Type Temp[32]; \
            const uniform int Mask2[32] = {0, 0 + 32, 1, 1 + 32,         4, 4 + 32, 5, 5 + 32,     8,  8 + 32,  9, 9 + 32,     12, 12 + 32, 13, 13 + 32,  \
                                           16, 16 + 32, 17, 17 + 32,    20, 20 + 32, 21, 21 + 32,  24, 24 + 32, 25, 25 + 32,   28, 28 + 32, 29, 29 + 32}; \
            const uniform int Mask3[32] = {2, 2 + 32, 3, 3 + 32,      6, 6 + 32, 7, 7 + 32, 10, 10 + 32, 11, 11 + 32, 14, 14 + 32, 15, 15 + 32, \
                                           18, 18 + 32, 19, 19 + 32,  22, 22 + 32, 23, 23 + 32,    26, 26 + 32, 27, 27 + 32,   30, 30 + 32, 31, 31 + 32}; \
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type, Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
            COEX(Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
\
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type, Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
            COEX(Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1), COEX_OP, Sort32Type, __VA_ARGS__); \
\
            Copy_Temp_Vector32(Temp, Data + GetVectorIndex32(I)); \
            Shuffle32_Two_Vectors(Sort32Type, Data + GetVectorIndex32(I), Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I), Mask2); \
            Shuffle32_Two_Vectors(Sort32Type, Temp, Data + GetVectorIndex32(I + 1),  Data + GetVectorIndex32(I + 1), Mask3); \
        } \
	} \
}

#define Sort32_Sorting_Network_Impl(Sort32Type, Data, DataSize, Buffer, MaxValue, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    if (DataSize < 2) \
    { \
        return; \
    } \
    else if (DataSize == 64) \
    { \
        Bitonic_Sort_64(Sort32Type, Data, COEX_OP, __VA_ARGS__); \
        return; \
    } \
\
    uniform int Remainder = DataSize % 32 ? DataSize % 32 : 32; \
    uniform int Index_Max_Pad = DataSize - Remainder; \
\
    foreach (i = 0 ... DataSize) \
    { \
        Buffer[i] = Data[i]; \
    } \
\
    foreach (i = DataSize ... (Index_Max_Pad + 32 + 32)) \
    { \
        Buffer[i] = MaxValue; \
    } \
\
    uniform int N = ((Index_Max_Pad % 64 == 0 ? 1 : 0) * 32 + Index_Max_Pad + 32) / 32; \
\
    for (uniform int J = 0; J < (N - N % 16); J += 16) \
    { \
       uniform Sort32Type* TempData = Buffer + GetVectorIndex32(J); \
       Sort_16_Column_Wise_32(Sort32Type, TempData, COEX_OP, __VA_ARGS__); \
       Merge_32_Columns_With_16_Elements(Sort32Type, TempData, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
    } \
\
    for (uniform int I = N - N % 16; I < N; I += 2) \
    { \
        uniform Sort32Type* TempData = Buffer + GetVectorIndex32(I); \
        Bitonic_Sort_64(Sort32Type, TempData, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
    } \
\
    uniform Sort32Type* TempData = Buffer + GetVectorIndex32(N - N % 16); \
    Bitonic_Merge32_64(Sort32Type, TempData, (N % 16), 2, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
    Bitonic_Merge32_512(Sort32Type, Buffer, N, 16, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
\
    foreach (i = 0 ... DataSize) \
    { \
        Data[i] = Buffer[i]; \
    } \
}

#endif
