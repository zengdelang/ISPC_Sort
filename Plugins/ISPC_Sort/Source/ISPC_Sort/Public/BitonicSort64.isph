#ifndef __BITONICSORT64_ISPH__
#define __BITONICSORT64_ISPH__

#define Copy_Temp_Vector64(Temp, V) \
{ \
    foreach (i = 0 ... 64) \
    { \
        (Temp)[i] = (V)[i]; \
    } \
}

#if TARGET_WIDTH == 64

#define Shuffle64_One_Vector(Sort64Type, V, Mask) \
{\
    foreach (i = 0 ... 64) \
    { \
        (V)[i] = shuffle((V)[i], Mask[i]); \
    } \
}

#else

#define Shuffle64_One_Vector(Sort64Type, V, Mask) \
{\
    uniform Sort64Type _STemp[64]; \
    Copy_Temp_Vector64(_STemp, V); \
    foreach (i = 0 ... 64) \
    { \
        _Pragma("ignore warning(perf)") \
        (V)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#if TARGET_WIDTH == 64

#define Shuffle64_One_Vector_To_Vector(Sort64Type, V, SaveV, Mask) \
{ \
    foreach (i = 0 ... 64) \
    { \
        (SaveV)[i] = shuffle((V)[i], Mask[i]); \
    } \
}

#else

#define Shuffle64_One_Vector_To_Vector(Sort64Type, V, SaveV, Mask) \
{ \
    uniform Sort64Type _STemp[64]; \
    Copy_Temp_Vector64(_STemp, V); \
    foreach (i = 0 ... 64) \
    { \
        _Pragma("ignore warning(perf)") \
        (SaveV)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#if TARGET_WIDTH == 64 

#define Shuffle64_Two_Vectors(Sort64Type, V1, V2, SaveV, Mask) \
{ \
    foreach (i = 0 ... 64) \
    { \
        (SaveV)[i] = shuffle((V1)[i], (V2)[i], Mask[i]); \
    } \
}

#else

#define Shuffle64_Two_Vectors(Sort64Type, V1, V2, SaveV, Mask) \
{ \
    uniform Sort64Type _STemp[64 + 64]; \
    foreach (i = 0 ... 64) \
    { \
        _STemp[i] = (V1)[i]; \
        _STemp[i + 64] = (V2)[i]; \
    } \
\
    foreach (i = 0 ... 64) \
    { \
        _Pragma("ignore warning(perf)") \
        (SaveV)[i] = _STemp[Mask[i]]; \
    } \
}

#endif

#ifndef COEX

#define COEX(V1, V2, COEX_OP, Sort64Type, ...) \
{ \
    COEX_OP(V1, V2, Sort64Type, __VA_ARGS__); \
}

#endif

#define COEX_64_ASC(V1, V2, Sort64Type, ...) \
{ \
    foreach (i = 0 ... 64) \
    { \
        Sort64Type TempV = (V1)[i]; \
\
        (V1)[i] = min(TempV, (V2)[i]); \
        (V2)[i] = max(TempV, (V2)[i]); \
    } \
}

#define COEX_64_DESC(V1, V2, Sort64Type, ...) \
{ \
    foreach (i = 0 ... 64) \
    { \
        Sort64Type TempV = (V1)[i]; \
\
        (V1)[i] = max(TempV, (V2)[i]); \
        (V2)[i] = min(TempV, (V2)[i]); \
    } \
}

#ifndef COEX_SHUFFLE

#define COEX_SHUFFLE(V, Mask1, Mask2, COEX_SHUFFLE_OP, Sort64Type, ...) \
{ \
    COEX_SHUFFLE_OP(V, Mask1, Mask2, Sort64Type, __VA_ARGS__); \
}

#endif

#define COEX_SHUFFLE_64_ASC(V, Mask1, Mask2, Sort64Type, ...) \
{ \
    uniform Sort64Type TempV[64]; \
    Shuffle64_One_Vector_To_Vector(Sort64Type, (V), TempV, Mask1); \
\
    uniform Sort64Type Min[64]; \
    uniform Sort64Type Max[64]; \
    foreach (i = 0 ... 64) \
    { \
        Min[i] = min(TempV[i], (V)[i]); \
        Max[i] = max(TempV[i], (V)[i]); \
    } \
\
    Shuffle64_Two_Vectors(Sort64Type, Min, Max, (V), Mask2); \
}

#define COEX_SHUFFLE_64_DESC(V, Mask1, Mask2, Sort64Type, ...) \
{ \
    uniform Sort64Type TempV[64]; \
    Shuffle64_One_Vector_To_Vector(Sort64Type, (V), TempV, Mask1); \
\
    uniform Sort64Type Min[64]; \
    uniform Sort64Type Max[64]; \
    foreach (i = 0 ... 64) \
    { \
        Min[i] = max(TempV[i], (V)[i]); \
        Max[i] = min(TempV[i], (V)[i]); \
    } \
\
    Shuffle64_Two_Vectors(Sort64Type, Min, Max, (V), Mask2); \
}

#define Bitonic_Sort_128(Sort64Type, Data, COEX_OP, ...) \
{ \
    uniform Sort64Type V1[64]; \
    uniform Sort64Type V2[64]; \
    uniform Sort64Type Temp[64]; \
\
\
    { \
        foreach (i = 0 ... 64) \
        { \
            V1[i] = Data[i]; \
            V2[i] = Data[i + 64]; \
        } \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask[64] = {1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30,  \
                                      33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 2, 64, 66, 4, 6, 68, 70, 8, 10, 72, 74, 12, 14, 76, 78, 16, 18, 80, 82, 20, 22, 84, 86, 24, 26, 88, 90, 28, 30, 92, 94,  \
                                       32, 34, 96, 98, 36, 38, 100, 102, 40, 42, 104, 106, 44, 46, 108, 110, 48, 50, 112, 114, 52, 54, 116, 118, 56, 58, 120, 122, 60, 62, 124, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 3, 65, 67, 5, 7, 69, 71, 9, 11, 73, 75, 13, 15, 77, 79, 17, 19, 81, 83, 21, 23, 85, 87, 25, 27, 89, 91, 29, 31, 93, 95, \
                                       33, 35, 97, 99, 37, 39, 101, 103, 41, 43, 105, 107, 45, 47, 109, 111, 49, 51, 113, 115, 53, 55, 117, 119, 57, 59, 121, 123, 61, 63, 125, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask3[64] = {3, 2, 1, 0,      7, 6, 5, 4,      11, 10, 9, 8,     15, 14, 13, 12,    19, 18, 17, 16,   23, 22, 21, 20,   27, 26, 25, 24,   31, 30, 29, 28,  \
                                       35, 34, 33, 32,  39, 38, 37,36,   43, 42, 41, 40,   47, 46, 45, 44,    51, 50, 49, 48,   55, 54, 53, 52,   59, 58, 57, 56,   63, 62, 61, 60}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask3); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 64, 65, 4, 5, 68, 69, 8, 9, 72, 73, 12, 13, 76, 77, 16, 17, 80, 81, 20, 21, 84, 85, 24, 25, 88, 89, 28, 29, 92, 93,  \
                                       32, 33, 96, 97, 36, 37, 100, 101, 40, 41, 104, 105, 44, 45, 108, 109, 48, 49, 112, 113, 52, 53, 116, 117, 56, 57, 120, 121, 60, 61, 124, 125}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {2, 3, 66, 67, 6, 7, 70, 71, 10, 11, 74, 75, 14, 15, 78, 79, 18, 19, 82, 83, 22, 23, 86, 87, 26, 27, 90, 91, 30, 31, 94, 95,  \
                                       34, 35, 98, 99, 38, 39, 102, 103, 42, 43, 106, 107, 46, 47, 110, 111, 50, 51, 114, 115, 54, 55, 118, 119, 58, 59, 122, 123, 62, 63, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 2, 65, 67, 4, 6, 69, 71, 8, 10, 73, 75, 12, 14, 77, 79, 16, 18, 81, 83, 20, 22, 85, 87, 24, 26, 89, 91, 28, 30, 93, 95,  \
                                       32, 34, 97, 99, 36, 38, 101, 103, 40, 42, 105, 107, 44, 46, 109, 111, 48, 50, 113, 115, 52, 54, 117, 119, 56, 58, 121, 123, 60, 62, 125, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 3, 64, 66, 5, 7, 68, 70, 9, 11, 72, 74, 13, 15, 76, 78, 17, 19, 80, 82, 21, 23, 84, 86, 25, 27, 88, 90, 29, 31, 92, 94,  \
                                       33, 35, 96, 98, 37, 39, 100, 102, 41, 43, 104, 106, 45, 47, 108, 110, 49, 51, 112, 114, 53, 55, 116, 118, 57, 59, 120, 122, 61, 63, 124, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask3[64] = {7, 6, 5, 4, 3, 2, 1, 0,  15, 14, 13, 12, 11, 10, 9, 8, 23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24,  \
                                       39, 38, 37, 36, 35, 34, 33, 32, 47, 46, 45, 44, 43, 42, 41, 40, 55, 54, 53, 52, 51, 50, 49, 48, 63, 62, 61, 60, 59, 58, 57, 56}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask3); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 2, 4, 6, 64, 66, 68, 70, 8, 10, 12, 14, 72, 74, 76, 78, 16, 18, 20, 22, 80, 82, 84, 86, 24, 26, 28, 30, 88, 90, 92, 94,  \
                                       32, 34, 36, 38, 96, 98, 100, 102, 40, 42, 44, 46, 104, 106, 108, 110, 48, 50, 52, 54, 112, 114, 116, 118, 56, 58, 60, 62, 120, 122, 124, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 3, 5, 7, 65, 67, 69, 71, 9, 11, 13, 15, 73, 75, 77, 79, 17, 19, 21, 23, 81, 83, 85, 87, 25, 27, 29, 31, 89, 91, 93, 95,  \
                                       33, 35, 37, 39, 97, 99, 101, 103, 41, 43, 45, 47, 105, 107, 109, 111, 49, 51, 53, 55, 113, 115, 117, 119, 57, 59, 61, 63, 121, 123, 125, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 2, 64, 66, 4, 6, 68, 70, 8, 10, 72, 74, 12, 14, 76, 78, 16, 18, 80, 82, 20, 22, 84, 86, 24, 26, 88, 90, 28, 30, 92, 94,  \
                                       32, 34, 96, 98, 36, 38, 100, 102, 40, 42, 104, 106, 44, 46, 108, 110, 48, 50, 112, 114, 52, 54, 116, 118, 56, 58, 120, 122, 60, 62, 124, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 3, 65, 67, 5, 7, 69, 71, 9, 11, 73, 75, 13, 15, 77, 79, 17, 19, 81, 83, 21, 23, 85, 87, 25, 27, 89, 91, 29, 31, 93, 95,  \
                                       33, 35, 97, 99, 37, 39, 101, 103, 41, 43, 105, 107, 45, 47, 109, 111, 49, 51, 113, 115, 53, 55, 117, 119, 57, 59, 121, 123, 61, 63, 125, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    }  \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 64, 2, 66, 4, 68, 6, 70, 8, 72, 10, 74, 12, 76, 14, 78, 16, 80, 18, 82, 20, 84, 22, 86, 24, 88, 26, 90, 28, 92, 30, 94,  \
                                       32, 96, 34, 98, 36, 100, 38, 102, 40, 104, 42, 106, 44, 108, 46, 110, 48, 112, 50, 114, 52, 116, 54, 118, 56, 120, 58, 122, 60, 124, 62, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 65, 3, 67, 5, 69, 7, 71, 9, 73, 11, 75, 13, 77, 15, 79, 17, 81, 19, 83, 21, 85, 23, 87, 25, 89, 27, 91, 29, 93, 31, 95,  \
                                       33, 97, 35, 99, 37, 101, 39, 103, 41, 105, 43, 107, 45, 109, 47, 111, 49, 113, 51, 115, 53, 117, 55, 119, 57, 121, 59, 123, 61, 125, 63, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask[64] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,             31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,  \
                                      47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32,   63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 8, 9, 10, 11, 64, 65, 66, 67, 72, 73, 74, 75, 16, 17, 18, 19, 24, 25, 26, 27, 80, 81, 82, 83, 88, 89, 90, 91,  \
                                       32, 33, 34, 35, 40, 41, 42, 43, 96, 97, 98, 99, 104, 105, 106, 107, 48, 49, 50, 51, 56, 57, 58, 59, 112, 113, 114, 115, 120, 121, 122, 123}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {4, 5, 6, 7, 12, 13, 14, 15, 68, 69, 70, 71, 76, 77, 78, 79, 20, 21, 22, 23, 28, 29, 30, 31, 84, 85, 86, 87, 92, 93, 94, 95,  \
                                       36, 37, 38, 39, 44, 45, 46, 47, 100, 101, 102, 103, 108, 109, 110, 111, 52, 53, 54, 55, 60, 61, 62, 63, 116, 117, 118, 119, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 4, 5, 64, 65, 68, 69, 8, 9, 12, 13, 72, 73, 76, 77, 16, 17, 20, 21, 80, 81, 84, 85, 24, 25, 28, 29, 88, 89, 92, 93,  \
                                       32, 33, 36, 37, 96, 97, 100, 101, 40, 41, 44, 45, 104, 105, 108, 109, 48, 49, 52, 53, 112, 113, 116, 117, 56, 57, 60, 61, 120, 121, 124, 125}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {2, 3, 6, 7, 66, 67, 70, 71, 10, 11, 14, 15, 74, 75, 78, 79, 18, 19, 22, 23, 82, 83, 86, 87, 26, 27, 30, 31, 90, 91, 94, 95, 34, 35,  \
                                      38, 39, 98, 99, 102, 103, 42, 43, 46, 47, 106, 107, 110, 111, 50, 51, 54, 55, 114, 115, 118, 119, 58, 59, 62, 63, 122, 123, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 2, 64, 66, 4, 6, 68, 70, 8, 10, 72, 74, 12, 14, 76, 78, 16, 18, 80, 82, 20, 22, 84, 86, 24, 26, 88, 90, 28, 30, 92, 94,  \
                                       32, 34, 96, 98, 36, 38, 100, 102, 40, 42, 104, 106, 44, 46, 108, 110, 48, 50, 112, 114, 52, 54, 116, 118, 56, 58, 120, 122, 60, 62, 124, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 3, 65, 67, 5, 7, 69, 71, 9, 11, 73, 75, 13, 15, 77, 79, 17, 19, 81, 83, 21, 23, 85, 87, 25, 27, 89, 91, 29, 31, 93, 95,  \
                                       33, 35, 97, 99, 37, 39, 101, 103, 41, 43, 105, 107, 45, 47, 109, 111, 49, 51, 113, 115, 53, 55, 117, 119, 57, 59, 121, 123, 61, 63, 125, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 64, 2, 66, 4, 68, 6, 70, 8, 72, 10, 74, 12, 76, 14, 78, 16, 80, 18, 82, 20, 84, 22, 86, 24, 88, 26, 90, 28, 92, 30, 94,  \
                                       32, 96, 34, 98, 36, 100, 38, 102, 40, 104, 42, 106, 44, 108, 46, 110, 48, 112, 50, 114, 52, 116, 54, 118, 56, 120, 58, 122, 60, 124, 62, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 65, 3, 67, 5, 69, 7, 71, 9, 73, 11, 75, 13, 77, 15, 79, 17, 81, 19, 83, 21, 85, 23, 87, 25, 89, 27, 91, 29, 93, 31, 95,  \
                                       33, 97, 35, 99, 37, 101, 39, 103, 41, 105, 43, 107, 45, 109, 47, 111, 49, 113, 51, 115, 53, 117, 55, 119, 57, 121, 59, 123, 61, 125, 63, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask[64] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,  \
                                      63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 31, 1, 30, 2, 29, 3, 28, 4, 27, 5, 26, 6, 25, 7, 24, 64, 95, 65, 94, 66, 93, 67, 92, 68, 91, 69, 90, 70, 89, 71, 88, 32, 63, 33, 62, 34, 61, 35, 60, 36, 59, 37, 58, 38, 57, 39, 56, 96, 127, 97, 126, 98, 125, 99, 124, 100, 123, 101, 122, 102, 121, 103, 120}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {8, 23, 9, 22, 10, 21, 11, 20, 12, 19, 13, 18, 14, 17, 15, 16, 72, 87, 73, 86, 74, 85, 75, 84, 76, 83, 77, 82, 78, 81, 79, 80, 40, 55, 41, 54, 42, 53, 43, 52, 44, 51, 45, 50, 46, 49, 47, 48, 104, 119, 105, 118, 106, 117, 107, 116, 108, 115, 109, 114, 110, 113, 111, 112}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 4, 5, 6, 7, 64, 65, 66, 67, 68, 69, 70, 71, 16, 17, 18, 19, 20, 21, 22, 23, 80, 81, 82, 83, 84, 85, 86, 87, 32, 33, 34, 35, 36, 37, 38, 39, 96, 97, 98, 99, 100, 101, 102, 103, 48, 49, 50, 51, 52, 53, 54, 55, 112, 113, 114, 115, 116, 117, 118, 119}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {8, 9, 10, 11, 12, 13, 14, 15, 72, 73, 74, 75, 76, 77, 78, 79, 24, 25, 26, 27, 28, 29, 30, 31, 88, 89, 90, 91, 92, 93, 94, 95, 40, 41, 42, 43, 44, 45, 46, 47, 104, 105, 106, 107, 108, 109, 110, 111, 56, 57, 58, 59, 60, 61, 62, 63, 120, 121, 122, 123, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 64, 65, 66, 67, 8, 9, 10, 11, 72, 73, 74, 75, 16, 17, 18, 19, 80, 81, 82, 83, 24, 25, 26, 27, 88, 89, 90, 91,  \
                                       32, 33, 34, 35, 96, 97, 98, 99, 40, 41, 42, 43, 104, 105, 106, 107, 48, 49, 50, 51, 112, 113, 114, 115, 56, 57, 58, 59, 120, 121, 122, 123}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {4, 5, 6, 7, 68, 69, 70, 71, 12, 13, 14, 15, 76, 77, 78, 79, 20, 21, 22, 23, 84, 85, 86, 87, 28, 29, 30, 31, 92, 93, 94, 95,  \
                                      36, 37, 38, 39, 100, 101, 102, 103, 44, 45, 46, 47, 108, 109, 110, 111, 52, 53, 54, 55, 116, 117, 118, 119, 60, 61, 62, 63, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 64, 65, 4, 5, 68, 69, 8, 9, 72, 73, 12, 13, 76, 77, 16, 17, 80, 81, 20, 21, 84, 85, 24, 25, 88, 89, 28, 29, 92, 93,  \
                                       32, 33, 96, 97, 36, 37, 100, 101, 40, 41, 104, 105, 44, 45, 108, 109, 48, 49, 112, 113, 52, 53, 116, 117, 56, 57, 120, 121, 60, 61, 124, 125}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {2, 3, 66, 67, 6, 7, 70, 71, 10, 11, 74, 75, 14, 15, 78, 79, 18, 19, 82, 83, 22, 23, 86, 87, 26, 27, 90, 91, 30, 31, 94, 95,  \
                                       34, 35, 98, 99, 38, 39, 102, 103, 42, 43, 106, 107, 46, 47, 110, 111, 50, 51, 114, 115, 54, 55, 118, 119, 58, 59, 122, 123, 62, 63, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 64, 2, 66, 4, 68, 6, 70, 8, 72, 10, 74, 12, 76, 14, 78, 16, 80, 18, 82, 20, 84, 22, 86, 24, 88, 26, 90, 28, 92, 30, 94, 32, 96, 34, 98, 36, 100, 38, 102, 40, 104, 42, 106, 44, 108, 46, 110, 48, 112, 50, 114, 52, 116, 54, 118, 56, 120, 58, 122, 60, 124, 62, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 65, 3, 67, 5, 69, 7, 71, 9, 73, 11, 75, 13, 77, 15, 79, 17, 81, 19, 83, 21, 85, 23, 87, 25, 89, 27, 91, 29, 93, 31, 95, 33, 97, 35, 99, 37, 101, 39, 103, 41, 105, 43, 107, 45, 109, 47, 111, 49, 113, 51, 115, 53, 117, 55, 119, 57, 121, 59, 123, 61, 125, 63, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask[64] = {63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,  \
                                      33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
        Shuffle64_One_Vector(Sort64Type, V2, Mask); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 63, 1, 62, 2, 61, 3, 60, 4, 59, 5, 58, 6, 57, 7, 56, 8, 55, 9, 54, 10, 53, 11, 52, 12, 51, 13, 50, 14, 49, 15, 48, 64, 127, 65, 126, 66, 125, 67, 124, 68, 123, 69, 122, 70, 121, 71, 120, 72, 119, 73, 118, 74, 117, 75, 116, 76, 115, 77, 114, 78, 113, 79, 112}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {16, 47, 17, 46, 18, 45, 19, 44, 20, 43, 21, 42, 22, 41, 23, 40, 24, 39, 25, 38, 26, 37, 27, 36, 28, 35, 29, 34, 30, 33, 31, 32, 80, 111, 81, 110, 82, 109, 83, 108, 84, 107, 85, 106, 86, 105, 87, 104, 88, 103, 89, 102, 90, 101, 91, 100, 92, 99, 93, 98, 94, 97, 95, 96}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 4, 5, 6, 7, 64, 65, 66, 67, 68, 69, 70, 71, 16, 17, 18, 19, 20, 21, 22, 23, 80, 81, 82, 83, 84, 85, 86, 87, 32, 33, 34, 35, 36, 37, 38, 39, 96, 97, 98, 99, 100, 101, 102, 103, 48, 49, 50, 51, 52, 53, 54, 55, 112, 113, 114, 115, 116, 117, 118, 119}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {8, 9, 10, 11, 12, 13, 14, 15, 72, 73, 74, 75, 76, 77, 78, 79, 24, 25, 26, 27, 28, 29, 30, 31, 88, 89, 90, 91, 92, 93, 94, 95, 40, 41, 42, 43, 44, 45, 46, 47, 104, 105, 106, 107, 108, 109, 110, 111, 56, 57, 58, 59, 60, 61, 62, 63, 120, 121, 122, 123, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 2, 3, 64, 65, 66, 67, 8, 9, 10, 11, 72, 73, 74, 75, 16, 17, 18, 19, 80, 81, 82, 83, 24, 25, 26, 27, 88, 89, 90, 91, 32, 33, 34, 35, 96, 97, 98, 99, 40, 41, 42, 43, 104, 105, 106, 107, 48, 49, 50, 51, 112, 113, 114, 115, 56, 57, 58, 59, 120, 121, 122, 123}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {4, 5, 6, 7, 68, 69, 70, 71, 12, 13, 14, 15, 76, 77, 78, 79, 20, 21, 22, 23, 84, 85, 86, 87, 28, 29, 30, 31, 92, 93, 94, 95, 36, 37, 38, 39, 100, 101, 102, 103, 44, 45, 46, 47, 108, 109, 110, 111, 52, 53, 54, 55, 116, 117, 118, 119, 60, 61, 62, 63, 124, 125, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 1, 64, 65, 4, 5, 68, 69, 8, 9, 72, 73, 12, 13, 76, 77, 16, 17, 80, 81, 20, 21, 84, 85, 24, 25, 88, 89, 28, 29, 92, 93, 32, 33, 96, 97, 36, 37, 100, 101, 40, 41, 104, 105, 44, 45, 108, 109, 48, 49, 112, 113, 52, 53, 116, 117, 56, 57, 120, 121, 60, 61, 124, 125}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {2, 3, 66, 67, 6, 7, 70, 71, 10, 11, 74, 75, 14, 15, 78, 79, 18, 19, 82, 83, 22, 23, 86, 87, 26, 27, 90, 91, 30, 31, 94, 95, 34, 35, 98, 99, 38, 39, 102, 103, 42, 43, 106, 107, 46, 47, 110, 111, 50, 51, 114, 115, 54, 55, 118, 119, 58, 59, 122, 123, 62, 63, 126, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        Copy_Temp_Vector64(Temp, V1); \
\
        const uniform int Mask1[64] = {0, 32, 64, 96, 2, 34, 66, 98, 4, 36, 68, 100, 6, 38, 70, 102, 8, 40, 72, 104, 10, 42, 74, 106, 12, 44, 76, 108, 14, 46, 78, 110, 16, 48, 80, 112, 18, 50, 82, 114, 20, 52, 84, 116, 22, 54, 86, 118, 24, 56, 88, 120, 26, 58, 90, 122, 28, 60, 92, 124, 30, 62, 94, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V1, Mask1); \
\
        const uniform int Mask2[64] = {1, 33, 65, 97, 3, 35, 67, 99, 5, 37, 69, 101, 7, 39, 71, 103, 9, 41, 73, 105, 11, 43, 75, 107, 13, 45, 77, 109, 15, 47, 79, 111, 17, 49, 81, 113, 19, 51, 83, 115, 21, 53, 85, 117, 23, 55, 87, 119, 25, 57, 89, 121, 27, 59, 91, 123, 29, 61, 93, 125, 31, 63, 95, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, Temp, V2, V2, Mask2); \
\
        COEX(V1, V2, COEX_OP, Sort64Type, __VA_ARGS__); \
    } \
\
\
    { \
        const uniform int Mask1[64] = {0, 64, 2, 66, 4, 68, 6, 70, 8, 72, 10, 74, 12, 76, 14, 78, 16, 80, 18, 82, 20, 84, 22, 86, 24, 88, 26, 90, 28, 92, 30, 94, 32, 96, 34, 98, 36, 100, 38, 102, 40, 104, 42, 106, 44, 108, 46, 110, 48, 112, 50, 114, 52, 116, 54, 118, 56, 120, 58, 122, 60, 124, 62, 126}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, Data, Mask1); \
\
        const uniform int Mask2[64] = {1, 65, 3, 67, 5, 69, 7, 71, 9, 73, 11, 75, 13, 77, 15, 79, 17, 81, 19, 83, 21, 85, 23, 87, 25, 89, 27, 91, 29, 93, 31, 95, 33, 97, 35, 99, 37, 101, 39, 103, 41, 105, 43, 107, 45, 109, 47, 111, 49, 113, 51, 115, 53, 117, 55, 119, 57, 121, 59, 123, 61, 125, 63, 127}; \
        Shuffle64_Two_Vectors(Sort64Type, V1, V2, Data + 64, Mask2); \
    } \
}

#ifdef GetVectorIndex64
#undef GetVectorIndex64
#endif

#define GetVectorIndex64(Index) (Index) * 64

#define Merge_64_Columns_With_16_Elements(Sort64Type, Data, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    const uniform int Mask[64] = {1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, \
                                  17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, \
                                  33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, \
                                  49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62}; \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask1[64] = {0,     1 + 64,   2,    3 + 64,   4,  5 + 64,    6,  7 + 64,    8,  9 + 64,   10, 11 + 64,   12, 13 + 64,   14, 15 + 64, \
                                   16,   17 + 64,  18,   19 + 64,  20, 21 + 64,   22, 23 + 64,   24, 25 + 64,   26, 27 + 64,   28, 29 + 64,   30, 31 + 64, \
                                   32,   33 + 64,  34,   35 + 64,  36, 37 + 64,   38, 39 + 64,   40, 41 + 64,   42, 43 + 64,   44, 45 + 64,   46, 47 + 64, \
                                   48,   49 + 64,  50,   51 + 64,  52, 53 + 64,   54, 55 + 64,   56, 57 + 64,   58, 59 + 64,   60, 61 + 64,   62, 63 + 64}; \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask2[64] = {3, 2, 1, 0,      7, 6, 5, 4,         11, 10, 9, 8,    15, 14, 13, 12, \
                                   19, 18, 17, 16,  23, 22, 21, 20,     27, 26, 25, 24,  31, 30, 29, 28, \
                                   35, 34, 33, 32,  39, 38, 37, 36,     43, 42, 41, 40,  47, 46, 45, 44, \
                                   51, 50, 49, 48,  55, 54, 53, 52,     59, 58, 57, 56,  63, 62, 61, 60};   \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask2); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask2); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask2); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask2); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask2); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask2); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask2); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask2); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask2); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask2); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask2); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask2); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask2); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask2); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask2); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask2); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask2); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask2); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask2); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask2); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask2); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask2); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask2); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask2); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask2); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask2); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask2); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask2); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask2); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask2); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask2); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask2); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask3[64] = {0, 1, 2 + 64, 3 + 64, 4, 5, 6 + 64, 7 + 64, 8, 9, 10 + 64, 11 + 64, 12, 13, 14 + 64, 15 + 64, \
                                   16, 17, 18 + 64, 19 + 64, 20, 21, 22 + 64, 23 + 64, 24, 25, 26 + 64, 27 + 64, 28, 29, 30 + 64, 31 + 64, \
                                   32, 33, 34 + 64, 35 + 64, 36, 37, 38 + 64, 39 + 64, 40, 41, 42 + 64, 43 + 64, 44, 45, 46 + 64, 47 + 64,  \
                                   48, 49, 50 + 64, 51 + 64, 52, 53, 54 + 64, 55 + 64, 56, 57, 58 + 64, 59 + 64, 60, 61, 62 + 64, 63 + 64}; \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask2, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask4[64] = {7, 6, 5, 4, 3, 2, 1, 0,          15, 14, 13, 12, 11, 10, 9, 8, \
                                   23, 22, 21, 20, 19, 18, 17, 16,  31, 30, 29, 28, 27, 26, 25, 24, \
                                   39, 38, 37, 36, 35, 34, 33, 32,  47, 46, 45, 44, 43, 42, 41, 40, \
                                   55, 54, 53, 52, 51, 50, 49, 48,  63, 62, 61, 60, 59, 58, 57, 56,}; \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask4); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask4); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask4); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask4); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask4); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask4); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask4); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask4); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask4); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask4); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask4); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask4); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask4); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask4); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask4); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask4); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask4); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask4); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask4); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask4); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask4); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask4); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask4); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask4); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask4); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask4); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask4); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask4); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask4); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask4); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask4); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask4); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask5[64] = {0, 1, 2, 3, 4 + 64, 5 + 64, 6 + 64, 7 + 64, 8, 9, 10, 11, 12 + 64, 13 + 64, 14 + 64, 15 + 64, \
                                   16, 17, 18, 19, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24, 25, 26, 27, 28 + 64, 29 + 64, 30 + 64, 31 + 64, \
                                   32, 33, 34, 35, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40, 41, 42, 43, 44 + 64, 45 + 64, 46 + 64, 47 + 64, \
                                   48, 49, 50, 51, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56, 57, 58, 59, 60 + 64, 61 + 64, 62 + 64, 63 + 64,}; \
\
    const uniform int Mask2_[64] = {2, 3, 0, 1,      6, 7, 4, 5,      10, 11, 8, 9,    14, 15, 12, 13,   \
                                    18, 19, 16, 17,  22, 23, 20, 21,  26, 27, 24, 25,  30, 31, 28, 29,  \
                                    34, 35, 32, 33,  38, 39, 36, 37,  42, 43, 40, 41,  46, 47, 44, 45,  \
                                    50, 51, 48, 49,  54, 55, 52, 53,  58, 59, 56, 57,  62, 63, 60, 61,}; \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask6[64] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,  \
                                   47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48}; \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask6); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask6); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask6); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask6); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask6); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask6); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask6); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask6); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask6); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask6); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask6); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask6); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask6); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask6); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask6); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask6); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask6); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask6); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask6); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask6); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask6); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask6); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask6); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask6); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask6); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask6); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask6); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask6); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask6); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask6); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask6); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask6); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask7[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8 + 64, 9 + 64, 10 + 64, 11 + 64, 12 + 64, 13 + 64, 14 + 64, 15 + 64,  \
                                   16, 17, 18, 19, 20, 21, 22, 23, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                   32, 33, 34, 35, 36, 37, 38, 39, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64,  \
                                   48, 49, 50, 51, 52, 53, 54, 55, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
    const uniform int Mask4_[64] = {4, 5, 6, 7, 0, 1, 2, 3,              12, 13, 14, 15, 8, 9, 10, 11,     \
                                    20, 21, 22, 23, 16, 17, 18, 19,      28, 29, 30, 31, 24, 25, 26, 27,    \
                                    36, 37, 38, 39, 32, 33, 34, 35,      44, 45, 46, 47, 40, 41, 42, 43,     \
                                    52, 53, 54, 55, 48, 49, 50, 51,      60, 61, 62, 63, 56, 57, 58, 59}; \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask8[64] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,  \
                                   63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32}; \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask8); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask8); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask8); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask8); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask8); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask8); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask8); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask8); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask8); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask8); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask8); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask8); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask8); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask8); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask8); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask8); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask8); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask8); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask8); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask8); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask8); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask8); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask8); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask8); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask8); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask8); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask8); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask8); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask8); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask8); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask8); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask8); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask9[64] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,  \
                                    16 + 64, 17 + 64, 18 + 64, 19 + 64, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \
                                    48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
    const uniform int Mask6_[64] = {8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7,     \
                                    24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23,     \
                                    40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39,     \
                                    56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55}; \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask10[64] = {63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, \
                                    31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(8), Mask10); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask10); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask10); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask10); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask10); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask10); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask10); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask10); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(4), Mask10); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask10); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask10); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask10); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(12), Mask10); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask10); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask10); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask10); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(2), Mask10); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask10); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(6), Mask10); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask10); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(10), Mask10); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask10); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(14), Mask10); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask10); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(1), Mask10); COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(3), Mask10); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(5), Mask10); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(7), Mask10); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(9), Mask10); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(11), Mask10); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(13), Mask10); COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(15), Mask10); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    const uniform int Mask11[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  \
                                    32 + 64, 33 + 64, 34 + 64, 35 + 64, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64, 48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
    const uniform int Mask8_[64] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, \
                                    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,}; \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(0), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(2), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(3), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(4), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(5), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(6), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(7), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(8), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(9), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(10), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(11), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(12), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(13), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(14), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask10, Mask11, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask8_, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask6_, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask4_, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask2_, Mask3, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
    COEX_SHUFFLE(Data + GetVectorIndex64(15), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
}

// The size of Data must be 1024
// Green’s irregular sorting network
#define Sort_16_Column_Wise_64(Sort64Type, Data, COEX_OP, ...) \
{ \
    COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(1), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(14), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(3), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(12), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(0), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(15), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(11), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(13), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(4), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(2), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(1), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(14), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(2), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(13), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(5), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(10), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(3), Data + GetVectorIndex64(4), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(5), Data + GetVectorIndex64(6), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(7), Data + GetVectorIndex64(8), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(9), Data + GetVectorIndex64(10), COEX_OP, Sort64Type, __VA_ARGS__); \
    COEX(Data + GetVectorIndex64(11), Data + GetVectorIndex64(12), COEX_OP, Sort64Type, __VA_ARGS__); \
\
    COEX(Data + GetVectorIndex64(6), Data + GetVectorIndex64(7), COEX_OP, Sort64Type, __VA_ARGS__); COEX(Data + GetVectorIndex64(8), Data + GetVectorIndex64(9), COEX_OP, Sort64Type, __VA_ARGS__); \
}

#define Bitonic_Merge64_128(Sort64Type, Data, N, S, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    for (uniform int T = S * 2; T < 2 * N; T *= 2) \
	{ \
		for (uniform int L = 0; L < N; L += T) \
		{ \
			for (uniform int J = max(L + T - N, 0); J < T / 2; J += 2) \
			{ \
                const uniform int Mask[64] = {63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, \
                                              31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
                Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(L + T - 1 - J), Mask); \
                Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(L + T - 2 - J), Mask); \
\
				COEX(Data + GetVectorIndex64(L + J), Data + GetVectorIndex64(L + T - 1 - J), COEX_OP, Sort64Type, __VA_ARGS__); \
				COEX(Data + GetVectorIndex64(L + J + 1), Data + GetVectorIndex64(L + T - 2 - J), COEX_OP, Sort64Type, __VA_ARGS__); \
			} \
		} \
\
		for (uniform int M = T / 2; M > 4; M /= 2) \
		{ \
			for (uniform int k = 0; k < N - M / 2; k += M) \
			{ \
				const uniform int Bound = min((k + M / 2), N - (M / 2)); \
				for (uniform int J = k; J < Bound; J += 2) \
				{ \
					COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(M / 2 + J), COEX_OP, Sort64Type, __VA_ARGS__); \
					COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(M / 2 + J + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
				} \
			} \
		} \
\
		for (uniform int J = 0; J < N - 2; J += 4) \
		{ \
			COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(J + 2), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(J + 3), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N; J += 2) \
		{ \
			COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(J + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int I = 0; I < N; I += 2) \
		{ \
            const uniform int Mask8[64] = {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, \
                                           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}; \
\
            const uniform int Mask9[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  \
                                           32 + 64, 33 + 64, 34 + 64, 35 + 64, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64, 48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            const uniform int Mask6[64] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,    \
                                           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, \
                                           48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,}; \
            const uniform int Mask7[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,  \
                                           16 + 64, 17 + 64, 18 + 64, 19 + 64, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \
                                           48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            const uniform int Mask[64] = {8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7,     \
                                          24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23,    \
                                          40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39,     \
                                          56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55}; \
            const uniform int Mask1[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8 + 64, 9 + 64, 10 + 64, 11 + 64, 12 + 64, 13 + 64, 14 + 64, 15 + 64,  \
                                           16, 17, 18, 19, 20, 21, 22, 23, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64,  \
                                           48, 49, 50, 51, 52, 53, 54, 55, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            const uniform int Mask4[64] = {4, 5, 6, 7, 0, 1, 2, 3,            12, 13, 14, 15, 8, 9, 10, 11,     \
                                           20, 21, 22, 23, 16, 17, 18, 19,    28, 29, 30, 31, 24, 25, 26, 27,   \
                                           36, 37, 38, 39, 32, 33, 34, 35,    44, 45, 46, 47, 40, 41, 42, 43,      \
                                           52, 53, 54, 55, 48, 49, 50, 51,    60, 61, 62, 63, 56, 57, 58, 59,}; \
            const uniform int Mask5[64] = {0, 1, 2, 3, 4 + 64, 5 + 64, 6 + 64, 7 + 64, 8, 9, 10, 11, 12 + 64, 13 + 64, 14 + 64, 15 + 64, \
                                           16, 17, 18, 19, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24, 25, 26, 27, 28 + 64, 29 + 64, 30 + 64, 31 + 64, \
                                           32, 33, 34, 35, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40, 41, 42, 43, 44 + 64, 45 + 64, 46 + 64, 47 + 64, \
                                           48, 49, 50, 51, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56, 57, 58, 59, 60 + 64, 61 + 64, 62 + 64, 63 + 64,}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            uniform Sort64Type Temp[64]; \
            const uniform int Mask2[64] = {0, 0 + 64, 1, 1 + 64, 4, 4 + 64, 5, 5 + 64, 8, 8 + 64, 9, 9 + 64, 12, 12 + 64, 13, 13 + 64,  \
                                           16, 16 + 64, 17, 17 + 64, 20, 20 + 64, 21, 21 + 64, 24, 24 + 64, 25, 25 + 64, 28, 28 + 64, 29, 29 + 64,  \
                                           32, 32 + 64, 33, 33 + 64, 36, 36 + 64, 37, 37 + 64, 40, 40 + 64, 41, 41 + 64, 44, 44 + 64, 45, 45 + 64,  \
                                           48, 48 + 64, 49, 49 + 64, 52, 52 + 64, 53, 53 + 64, 56, 56 + 64, 57, 57 + 64, 60, 60 + 64, 61, 61 + 64}; \
            const uniform int Mask3[64] = {2, 2 + 64, 3, 3 + 64, 6, 6 + 64, 7, 7 + 64, 10, 10 + 64, 11, 11 + 64, 14, 14 + 64, 15, 15 + 64,  \
                                           18, 18 + 64, 19, 19 + 64, 22, 22 + 64, 23, 23 + 64, 26, 26 + 64, 27, 27 + 64, 30, 30 + 64, 31, 31 + 64,  \
                                           34, 34 + 64, 35, 35 + 64, 38, 38 + 64, 39, 39 + 64, 42, 42 + 64, 43, 43 + 64, 46, 46 + 64, 47, 47 + 64,  \
                                           50, 50 + 64, 51, 51 + 64, 54, 54 + 64, 55, 55 + 64, 58, 58 + 64, 59, 59 + 64, 62, 62 + 64, 63, 63 + 64}; \
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
            COEX(Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
\
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
            COEX(Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
\
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
		} \
	} \
}

#define Bitonic_Merge64_1024(Sort64Type, Data, N, S, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
	uniform int Remainder16 = N - N % 16; \
	uniform int Remainder8 = N - N % 8; \
\
	for (uniform int T = S * 2; T < 2 * N; T *= 2) \
	{ \
		for (uniform int L = 0; L < N; L += T) \
		{ \
			for (uniform int J = max(L + T - N, 0); J < T / 2; J += 2) \
			{ \
                const uniform int Mask[64] = {63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, \
                                              31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; \
                Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(L + T - 1 - J), Mask); \
                Shuffle64_One_Vector(Sort64Type, Data + GetVectorIndex64(L + T - 2 - J), Mask); \
\
				COEX(Data + GetVectorIndex64(L + J), Data + GetVectorIndex64(L + T - 1 - J), COEX_OP, Sort64Type, __VA_ARGS__); \
				COEX(Data + GetVectorIndex64(L + J + 1), Data + GetVectorIndex64(L + T - 2 - J), COEX_OP, Sort64Type, __VA_ARGS__); \
			} \
		} \
\
		for (uniform int M = T / 2; M > 16; M /= 2) \
		{ \
			for (uniform int K = 0; K < N - M / 2; K += M) \
			{ \
				uniform int Bound = min((K + M / 2), N - (M / 2)); \
				for (uniform int J = K; J < Bound; J += 2) \
				{ \
					COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(M / 2 + J), COEX_OP, Sort64Type, __VA_ARGS__); \
					COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(M / 2 + J + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
				} \
			} \
		} \
\
		for (uniform int J = 0; J < Remainder16; J += 16) \
		{ \
			COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(J + 8), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(J + 9), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 2), Data + GetVectorIndex64(J + 10), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 3), Data + GetVectorIndex64(J + 11), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 4), Data + GetVectorIndex64(J + 12), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 5), Data + GetVectorIndex64(J + 13), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 6), Data + GetVectorIndex64(J + 14), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 7), Data + GetVectorIndex64(J + 15), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = Remainder16 + 8; J < N; J += 1) \
		{ \
			COEX(Data + GetVectorIndex64(J - 8), Data + GetVectorIndex64(J), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < Remainder8; J += 8) \
		{ \
			COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(J + 4), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(J + 5), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 2), Data + GetVectorIndex64(J + 6), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 3), Data + GetVectorIndex64(J + 7), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = Remainder8 + 4; J < N; J += 1) \
		{ \
			COEX(Data + GetVectorIndex64(J - 4), Data + GetVectorIndex64(J), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N - 2; J += 4) \
		{ \
			COEX(Data + GetVectorIndex64(J), Data + GetVectorIndex64(J + 2), COEX_OP, Sort64Type, __VA_ARGS__); \
			COEX(Data + GetVectorIndex64(J + 1), Data + GetVectorIndex64(J + 3), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
		for (uniform int J = 0; J < N; J += 2) \
		{ \
			COEX(Data+ GetVectorIndex64(J), Data + GetVectorIndex64(J + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
		} \
\
        for (uniform int I = 0; I < N; I += 2) \
        { \
            const uniform int Mask8[64] = {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, \
                                           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}; \
\
            const uniform int Mask9[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  \
                                           32 + 64, 33 + 64, 34 + 64, 35 + 64, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64, 48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask8, Mask9, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            const uniform int Mask6[64] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,    \
                                           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, \
                                           48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,}; \
            const uniform int Mask7[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,  \
                                           16 + 64, 17 + 64, 18 + 64, 19 + 64, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \
                                           48 + 64, 49 + 64, 50 + 64, 51 + 64, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask6, Mask7, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            const uniform int Mask[64] = {8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7,     \
                                          24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23,     \
                                          40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39,     \
                                          56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55}; \
            const uniform int Mask1[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8 + 64, 9 + 64, 10 + 64, 11 + 64, 12 + 64, 13 + 64, 14 + 64, 15 + 64,  \
                                           16, 17, 18, 19, 20, 21, 22, 23, 24 + 64, 25 + 64, 26 + 64, 27 + 64, 28 + 64, 29 + 64, 30 + 64, 31 + 64,  \
                                           32, 33, 34, 35, 36, 37, 38, 39, 40 + 64, 41 + 64, 42 + 64, 43 + 64, 44 + 64, 45 + 64, 46 + 64, 47 + 64,  \
                                           48, 49, 50, 51, 52, 53, 54, 55, 56 + 64, 57 + 64, 58 + 64, 59 + 64, 60 + 64, 61 + 64, 62 + 64, 63 + 64}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask, Mask1, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            const uniform int Mask4[64] = {4, 5, 6, 7, 0, 1, 2, 3,            12, 13, 14, 15, 8, 9, 10, 11, \
                                           20, 21, 22, 23, 16, 17, 18, 19,    28, 29, 30, 31, 24, 25, 26, 27, \
                                           36, 37, 38, 39, 32, 33, 34, 35,    44, 45, 46, 47, 40, 41, 42, 43, \
                                           52, 53, 54, 55, 48, 49, 50, 51,    60, 61, 62, 63, 56, 57, 58, 59,}; \
            const uniform int Mask5[64] = {0, 1, 2, 3, 4 + 64, 5 + 64, 6 + 64, 7 + 64, 8, 9, 10, 11, 12 + 64, 13 + 64, 14 + 64, 15 + 64, \
                                           16, 17, 18, 19, 20 + 64, 21 + 64, 22 + 64, 23 + 64, 24, 25, 26, 27, 28 + 64, 29 + 64, 30 + 64, 31 + 64, \
                                           32, 33, 34, 35, 36 + 64, 37 + 64, 38 + 64, 39 + 64, 40, 41, 42, 43, 44 + 64, 45 + 64, 46 + 64, 47 + 64, \
                                           48, 49, 50, 51, 52 + 64, 53 + 64, 54 + 64, 55 + 64, 56, 57, 58, 59, 60 + 64, 61 + 64, 62 + 64, 63 + 64,}; \
\
            COEX_SHUFFLE(Data + GetVectorIndex64(I), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
            COEX_SHUFFLE(Data + GetVectorIndex64(I + 1), Mask4, Mask5, COEX_SHUFFLE_OP, Sort64Type, __VA_ARGS__); \
\
            uniform Sort64Type Temp[64]; \
            const uniform int Mask2[64] = {0, 0 + 64, 1, 1 + 64, 4, 4 + 64, 5, 5 + 64, 8, 8 + 64, 9, 9 + 64, 12, 12 + 64, 13, 13 + 64,  \
                                           16, 16 + 64, 17, 17 + 64, 20, 20 + 64, 21, 21 + 64, 24, 24 + 64, 25, 25 + 64, 28, 28 + 64, 29, 29 + 64,  \
                                           32, 32 + 64, 33, 33 + 64, 36, 36 + 64, 37, 37 + 64, 40, 40 + 64, 41, 41 + 64, 44, 44 + 64, 45, 45 + 64,  \
                                           48, 48 + 64, 49, 49 + 64, 52, 52 + 64, 53, 53 + 64, 56, 56 + 64, 57, 57 + 64, 60, 60 + 64, 61, 61 + 64}; \
            const uniform int Mask3[64] = {2, 2 + 64, 3, 3 + 64, 6, 6 + 64, 7, 7 + 64, 10, 10 + 64, 11, 11 + 64, 14, 14 + 64, 15, 15 + 64,  \
                                           18, 18 + 64, 19, 19 + 64, 22, 22 + 64, 23, 23 + 64, 26, 26 + 64, 27, 27 + 64, 30, 30 + 64, 31, 31 + 64,  \
                                           34, 34 + 64, 35, 35 + 64, 38, 38 + 64, 39, 39 + 64, 42, 42 + 64, 43, 43 + 64, 46, 46 + 64, 47, 47 + 64,  \
                                           50, 50 + 64, 51, 51 + 64, 54, 54 + 64, 55, 55 + 64, 58, 58 + 64, 59, 59 + 64, 62, 62 + 64, 63, 63 + 64}; \
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
            COEX(Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
\
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
            COEX(Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1), COEX_OP, Sort64Type, __VA_ARGS__); \
\
            Copy_Temp_Vector64(Temp, Data + GetVectorIndex64(I)); \
            Shuffle64_Two_Vectors(Sort64Type, Data + GetVectorIndex64(I), Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I), Mask2); \
            Shuffle64_Two_Vectors(Sort64Type, Temp, Data + GetVectorIndex64(I + 1),  Data + GetVectorIndex64(I + 1), Mask3); \
        } \
	} \
}

#define Sort64_Sorting_Network_Impl(Sort64Type, Data, DataSize, Buffer, MaxValue, COEX_OP, COEX_SHUFFLE_OP, ...) \
{ \
    if (DataSize < 2) \
    { \
        return; \
    } \
    else if (DataSize == 128) \
    { \
        Bitonic_Sort_128(Sort64Type, Data, COEX_OP, __VA_ARGS__); \
        return; \
    } \
\
    uniform int Remainder = DataSize % 64 ? DataSize % 64 : 64; \
    uniform int Index_Max_Pad = DataSize - Remainder; \
\
    foreach (i = 0 ... DataSize) \
    { \
        Buffer[i] = Data[i]; \
    } \
\
    foreach (i = DataSize ... (Index_Max_Pad + 64 + 64)) \
    { \
        Buffer[i] = MaxValue; \
    } \
\
    uniform int N = ((Index_Max_Pad % 128 == 0 ? 1 : 0) * 64 + Index_Max_Pad + 64) / 64; \
\
    for (uniform int J = 0; J < (N - N % 16); J += 16) \
    { \
       uniform Sort64Type* TempData = Buffer + GetVectorIndex64(J); \
       Sort_16_Column_Wise_64(Sort64Type, TempData, COEX_OP, __VA_ARGS__); \
       Merge_64_Columns_With_16_Elements(Sort64Type, TempData, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
    } \
\
    for (uniform int I = N - N % 16; I < N; I += 2) \
    { \
        uniform Sort64Type* TempData = Buffer + GetVectorIndex64(I); \
        Bitonic_Sort_128(Sort64Type, TempData, COEX_OP, __VA_ARGS__); \
    } \
\
    uniform Sort64Type* TempData = Buffer + GetVectorIndex64(N - N % 16); \
    Bitonic_Merge64_128(Sort64Type, TempData, (N % 16), 2, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
    Bitonic_Merge64_1024(Sort64Type, Buffer, N, 16, COEX_OP, COEX_SHUFFLE_OP, __VA_ARGS__); \
\
    foreach (i = 0 ... DataSize) \
    { \
        Data[i] = Buffer[i]; \
    } \
}

#endif
